## must include https://github.com/blaz-r/pi_pico_neopixel/blob/main/neopixel.py

import time
from machine import Pin, PWM
from neopixel import Neopixel

# Initialize RGB LED
numpix = 1
pixels = Neopixel(numpix, 0, 0, "GRB")

# Initialize RGB LED effect parameters
pixels.brightness(50)
pixels.fill((0, 0, 0))  # Start with the LED off

ldr = machine.ADC(26)
 
def LDRValue():
    print(ldr.read_u16())
    time.sleep(0.5)

# Function to convert HSV to RGB
def hsv_to_rgb(h, s, v):
    if s == 0.0:
        r = g = b = v
    else:
        h = h * 6.0
        i = int(h)
        f = h - i
        p = v * (1.0 - s)
        q = v * (1.0 - s * f)
        t = v * (1.0 - s * (1.0 - f))
        if i == 0:
            r, g, b = v, t, p
        elif i == 1:
            r, g, b = q, v, p
        elif i == 2:
            r, g, b = p, v, t
        elif i == 3:
            r, g, b = p, q, v
        elif i == 4:
            r, g, b = t, p, v
        elif i == 5:
            r, g, b = v, p, q
    return int(r * 255), int(g * 255), int(b * 255)

h = 0.0  # Initial hue value

# Initialize speaker
speaker_pwm = PWM(Pin(21))

# Initialize the vibration motor on GP11
vibration_pin = Pin(11, Pin.OUT)

# Initialize the button on GP22
button_pin = Pin(22, Pin.IN, Pin.PULL_UP)

# Function to play a single beep boop sound
def play_beep_boop():
    speaker_pwm.freq(440)  # Beep frequency (A4)
    speaker_pwm.duty_u16(32768)
    time.sleep(0.1)
    speaker_pwm.duty_u16(0)
    speaker_pwm.freq(340)  # Beep frequency (A4)
    speaker_pwm.duty_u16(32768)
    time.sleep(0.1)
    speaker_pwm.duty_u16(0)

# Function to vibrate the motor in an on-off pattern
def vibrate_motor():
    vibration_pin.on()
    time.sleep(0.2)
    vibration_pin.off()
    time.sleep(0.2)

# Display rainbow LED effect
def RGBrun():
    global h
    rgb = hsv_to_rgb(h, 1.0, 1.0)
    pixels.fill(rgb)  # Fill the entire strip with the same color
    pixels.show()

    h += 0.01
    if h >= 1.0:
        h -= 1.0

    time.sleep(0.05)

# Wait for the button to be pressed
print("Press the button to start the test.")
while button_pin.value():
    pass

for _ in range(5):
    RGBrun()

# Turn off the RGB LED
pixels.fill((0, 0, 0))
pixels.show()

# Play a single beep boop sound
play_beep_boop()

# Vibrate the motor in an on-off pattern
for _ in range(1):
    vibrate_motor()

LDRValue()

